package org.generation.UnicornsBackery.controller;

import org.generation.UnicornsBackery.model.Users;
import org.generation.UnicornsBackery.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@CrossOrigin(origins = "http://127.0.0.1:5500")
@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/register") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody Users user)


    {
        /*@RequestParam String user_name,
        @RequestParam String email,
        @RequestParam String password,
        @RequestParam int id_type_user,
        @RequestParam String createAt,
        @RequestParam String updateAt
*/
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Users newUser = new Users();
        newUser.setUser_name(user.getUser_name());
        newUser.setEmail(user.getEmail());
        newUser.setPassword(user.getPassword());
        newUser.setId_type_user(user.getId_type_user());
        userRepository.save(newUser);
        return "Saved";
    }

    @PostMapping(path="/login")
    public @ResponseBody String loginUser(@RequestBody Users userAPI){

        Iterable<Users> users = userRepository.findAll();
        for (Users user: users) {
            if(user.getEmail().equals(userAPI.getEmail()) && user.getPassword().equals(userAPI.getPassword())){
                return "Logged";
            }
        }
        return "No log";
    }



    @GetMapping(path="/all")
    public @ResponseBody Iterable<Users> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

   /* @GetMapping(path="/find/{id}")
    public @ResponseBody String findUser(@PathVariable int id){
        return "se econtro el usuario"+userRepository.findById(id);
    }*/

    @GetMapping(path="/find/{id}")
    public @ResponseBody Iterable<Users> findUser(@PathVariable int id){
       List<Integer> ids = new ArrayList<>();
       ids.add(id);
       return userRepository.findAllById(ids);
    }


    @DeleteMapping(path = "delete/{id}")
    public @ResponseBody void deleteUser(@PathVariable int id){
        userRepository.deleteById(id);
    }

    @PutMapping(path = "update/{id}")
    public @ResponseBody void updateUser(@PathVariable int id,
                                         @RequestParam String user_name,
                                         @RequestParam String email,
                                         @RequestParam String password,
                                         @RequestParam int id_type_user,
                                         @RequestParam String createAt,
                                         @RequestParam String updateAt){
        Users updateUser = new Users();
        updateUser.setIdUsers(id);
        updateUser.setUser_name(user_name);
        updateUser.setEmail(email);
        updateUser.setPassword(password);
        updateUser.setId_type_user(id_type_user);
        updateUser.setCreateAt(createAt);
        updateUser.setUpdateAt(updateAt);
        userRepository.save(updateUser);
    }
}